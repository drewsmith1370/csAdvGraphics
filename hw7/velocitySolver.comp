#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout (std140, binding=0) uniform MouseUniformBuffer {
    vec2 mozCoord;
    float deltaTime;
    bool click;
} mozUbo;
// r, g, b channels are velocity vectors, a is density
layout (rgba32f, binding=0) uniform image2D FluidTex;
layout (r32f, binding=1) uniform image2D DivTex;

// const float grav = 0.98;
const float diffuse_rate = 10;
const float advect_rate  = 20;

vec4 getFluidInfo(ivec2 texel) {
    return imageLoad(FluidTex, texel);
}

ivec2 wrapEdges(ivec2 v) {
    // v.x = int(mod(v.x, 512.0));
    // v.y = int(mod(v.y, 512.0));

    if (v.x < 0) v.x = 0;
    if (v.x > 511) v.x = 511;
    if (v.y < 0) v.y = 0;
    if (v.y > 511) v.y = 511;
    return v;
}

vec4 addSources(vec4 info, ivec2 texel) {
    vec2 dif = mozUbo.mozCoord - vec2(texel) / 512.0;
    float dst = dif.x*dif.x + dif.y*dif.y;
    if (dst < .00001) {
        info.xy = vec2(-1,0);
    }

    return info;
}

vec4 diffusion(vec4 fluidInfo, ivec2 texel) {
    // Every frame swap densities with surrounding neighbors
    float dif = diffuse_rate * mozUbo.deltaTime;
    // Take neighboring texels
    ivec2 up   = wrapEdges(texel + ivec2(  0,  1));
    ivec2 down = wrapEdges(texel + ivec2(  0, -1));
    ivec2 left = wrapEdges(texel + ivec2( -1,  0));
    ivec2 rght = wrapEdges(texel + ivec2(  1,  0));

    vec2 newVelocity = fluidInfo.xy + .5 * dif * (getFluidInfo(left).xy + 
                                            getFluidInfo(down).xy +
                                            getFluidInfo(  up).xy +
                                            getFluidInfo(rght).xy - 4*fluidInfo.a);

    return vec4(newVelocity,fluidInfo.ba);
}

// Solve advection backwards (what points density value will end up in this one?)
vec4 advection(vec4 fluidInfo, ivec2 texel) {
    // Use velocity to travel backwards
    vec2 advCoord = vec2(texel) - fluidInfo.xy * mozUbo.deltaTime * advect_rate;
    // find the surrounding coordinates
    vec2 intPart=vec2(0);
    vec2 interpHi = modf(advCoord, intPart);
    ivec2 bl = ivec2(intPart);
    ivec2 br = ivec2(bl.x+1,bl.y  );
    ivec2 ul = ivec2(bl.x  ,bl.y+1);
    ivec2 ur = ivec2(bl.x+1,bl.y+1);
    bl = wrapEdges(bl);
    br = wrapEdges(br);
    ul = wrapEdges(ul);
    ur = wrapEdges(ur);
    // Fractional part used for interpolating between the texel values
    // interpHi = fract(advCoord);
    vec2 interpLo = 1 - interpHi;
    // Sample the points surrounding the actual point and interpolate for new value
    vec2 newVal = getFluidInfo(bl).xy * interpLo.x*interpLo.y +
                   getFluidInfo(br).xy * interpHi.x*interpLo.y +
                   getFluidInfo(ul).xy * interpLo.x*interpHi.y +
                   getFluidInfo(ur).xy * interpHi.x*interpHi.y;

    fluidInfo.xy = newVal;
    return fluidInfo;
}

// Use Helmholtz decomposition and keep the conservative component of the vector field (remove divergence)
vec4 helmholtzDecomp(vec4 fluidInfo, ivec2 texel) {
    barrier();
    imageStore(FluidTex, texel, fluidInfo);
    memoryBarrier();

    // Take neighboring texels
    ivec2 up   = wrapEdges(texel + ivec2(  0,  1));
    ivec2 down = wrapEdges(texel + ivec2(  0, -1));
    ivec2 left = wrapEdges(texel + ivec2( -1,  0));
    ivec2 rght = wrapEdges(texel + ivec2(  1,  0));

    // Calculate the divergence
    float h = 1;//512;
    float divergence = h * .5 * (getFluidInfo(rght).x - getFluidInfo(left).x +
                             getFluidInfo(up).y - getFluidInfo(down).y);
    barrier();
    imageStore(DivTex, texel, vec4(1,0,0,0));//vec4(divergence));

    // Use the divergence to find the gradient field
    vec2 grad = vec2(imageLoad(DivTex, rght).x - imageLoad(DivTex, left).x, imageLoad(DivTex, up).y - imageLoad(DivTex, down).y) * .5 / h;
    // Subtract the conservative part from the gradient field to get the curl (incompressible)
    fluidInfo.xy -= grad;

    imageStore(FluidTex, texel, fluidInfo);

    return fluidInfo;
}

void main() {
    // Get invocation texel coord
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    memoryBarrier();

    // Sample texel for info
    vec4 fluidInfo = getFluidInfo(texelCoord);

    // Add source
    if (mozUbo.click) fluidInfo = addSources(fluidInfo, texelCoord);
    // Diffusion
    // fluidInfo = diffusion(fluidInfo, texelCoord);
    // fluidInfo = helmholtzDecomp(fluidInfo, texelCoord);
    // Advection
    // fluidInfo = advection(fluidInfo, texelCoord);
    // fluidInfo = helmholtzDecomp(fluidInfo, texelCoord);

    barrier();
    imageStore(FluidTex, texelCoord, fluidInfo);
}